using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using pro_API.Repositories;
using pro_Models.Models;
using pro_Models.ViewModels;

namespace pro_API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class -Model-Controller : ControllerBase
    {
        private readonly I-Model-Repository -model-Repository;

        public -Model-Controller(I-Model-Repository -model-Repository)
        {
            this.-model-Repository = -model-Repository;
        }

        [HttpGet("{search}")]
        public async Task<ActionResult<IEnumerable<-Model-ViewModel>>> Search(string name)
        {
            try
            {
                var result = await -model-Repository.Search(name);

                if (result.Any())
                {
                    return Ok(result);
                }

                return NotFound();
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }
        [HttpGet]
        public async Task<ActionResult> Get-Model-s()
        {
            try
            {
                return Ok(await -model-Repository.Get-Model-s());
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }
        [HttpGet("{id:int}")]
        public async Task<ActionResult<-Model-ViewModel>> Get-Model-(int id)
        {
            try
            {
                var result = await -model-Repository.Get-Model-(id);

                if (result == null) return NotFound();

                return result;
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }
        [HttpPost]
        public async Task<ActionResult<-Model-ViewModel>> Create-Model-(-Model-ViewModel -model-ViewModel)
        {
            try
            {
                if (-model-ViewModel == null)return BadRequest();

                // Add custom model validation error
                -Model- dep = await -model-Repository.Get-Model-Byname(-model-ViewModel.-Model-);
                if (dep != null)
                {
                    ModelState.AddModelError("Name", $"-Model- name: {-model-ViewModel.-Model-.Name} already in use");
                    return BadRequest(ModelState);
                }

                -model-ViewModel = await -model-Repository.Add-Model-(-model-ViewModel);

                return CreatedAtAction(nameof(Get-Model-),
                    new { id = -model-ViewModel.-Model-.Id }, -model-ViewModel);
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new -model- record");
            }
        }
        [HttpPut("{id:int}")]
        public async Task<ActionResult<-Model-ViewModel>> Update-Model-(int id, -Model-ViewModel -model-ViewModel)
        {
            try
            {
                if (id != -model-ViewModel.-Model-.Id)
                    return BadRequest("-Model- ID mismatch");

                var -model-ToUpdate = await -model-Repository.Get-Model-(id);

                if (-model-ToUpdate == null)
                    return NotFound($"-Model- with Id = {id} not found");

                // Add custom model validation error
                -Model- dep = await -model-Repository.Get-Model-Byname(-model-ViewModel.-Model-);
                if (dep != null)
                {
                    ModelState.AddModelError("Name", $"-Model- name: {-model-ViewModel.-Model-.Name} already in use");
                    return BadRequest(ModelState);
                }

                return await -model-Repository.Update-Model-(-model-ViewModel);
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }
        [HttpDelete("{id:int}")]
        public async Task<ActionResult<-Model-ViewModel>> Delete-Model-(int id)
        {
            try
            {
                var -model-ToDelete = await -model-Repository.Get-Model-(id);

                if (-model-ToDelete == null)
                {
                    return NotFound($"-Model- with Id = {id} not found");
                }

                return await -model-Repository.Delete-Model-(id);
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}
