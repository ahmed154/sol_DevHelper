using Microsoft.EntityFrameworkCore;
using pro_API.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using pro_API.Repositories;
using pro_Models.Models;
using pro_Models.ViewModels;

namespace pro_API.Repositories
{
    public class -Model-Repository : I-Model-Repository
    {
        private readonly AppDbContext appDbContext;

        public -Model-Repository(AppDbContext appDbContext)
        {
            this.appDbContext = appDbContext;
        }
        async Task<IEnumerable<-Model-ViewModel>> I-Model-Repository.Search(string name)
        {
            List<-Model-ViewModel> -model-ViewModels = new List<-Model-ViewModel>();

            IQueryable<-Model-> query = appDbContext.-Model-s;

            if (!string.IsNullOrEmpty(name))
            {
                query = query.Where(e => e.Name.Contains(name));
            }

            var -model-s = await query.ToListAsync();

            foreach (var -model- in -model-s)
            {
                -model-ViewModels.Add(new -Model-ViewModel { -Model- = -model- });
            }
            return -model-ViewModels;
        }
        public async Task<IEnumerable<-Model-ViewModel>> Get-Model-s()
        {
            List<-Model-ViewModel> -model-ViewModels = new List<-Model-ViewModel>();
            var -model-s = await appDbContext.-Model-s.ToListAsync();
            foreach (var -model- in -model-s)
            {
                -model-ViewModels.Add(new -Model-ViewModel { -Model- = -model-});
            }
            return -model-ViewModels; 
        }
        public async Task<-Model-ViewModel> Get-Model-(int -model-Id)
        {
            -Model-ViewModel -model-ViewModel = new -Model-ViewModel();
            -model-ViewModel.-Model- = await appDbContext.-Model-s.FirstOrDefaultAsync(e => e.Id == -model-Id);
            return -model-ViewModel;
        }
        public async Task<-Model-ViewModel> Add-Model-(-Model-ViewModel -model-ViewModel)
        {
            var result = await appDbContext.-Model-s.AddAsync(-model-ViewModel.-Model-);
            await appDbContext.SaveChangesAsync();

            -model-ViewModel.-Model- = result.Entity;
            return -model-ViewModel;
        }
        public async Task<-Model-ViewModel> Update-Model-(-Model-ViewModel -model-ViewModel)
        {
            var result = await appDbContext.-Model-s
                .FirstOrDefaultAsync(e => e.Id == -model-ViewModel.-Model-.Id);

            if (result != null)
            {
                result.Name = -model-ViewModel.-Model-.Name;
                await appDbContext.SaveChangesAsync();
                return new -Model-ViewModel { -Model- = result };
            }

            return null;
        }
        public async Task<-Model-ViewModel> Delete-Model-(int -model-Id)
        {
            var result = await appDbContext.-Model-s
                .FirstOrDefaultAsync(e => e.Id == -model-Id);
            if (result != null)
            {
                appDbContext.-Model-s.Remove(result);
                await appDbContext.SaveChangesAsync();
                return new -Model-ViewModel { -Model- = result };
            }

            return null;
        }
/// <summary>
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// </summary>
        public async Task<-Model-> Get-Model-Byname(-Model- -model-)
        {
            return await appDbContext.-Model-s.Where(n => n.Name == -model-.Name && n.Id != -model-.Id)
                .FirstOrDefaultAsync();
        }
    }
}
